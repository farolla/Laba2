-- Создание новой базы данных
CREATE DATABASE StudentPerformanceDB;
GO

-- Переключение на созданную базу данных
USE StudentPerformanceDB;
GO

-- 1. Создание таблицы "Кафедра"
CREATE TABLE Кафедра (
    Название_кафедры NVARCHAR(100) PRIMARY KEY, -- Уникальное название кафедры
    Факультет NVARCHAR(100) NOT NULL,          -- Факультет, к которому относится кафедра
    ФИО_заведующего NVARCHAR(150) NOT NULL,    -- ФИО заведующего кафедрой
    Номер_комнаты INT NOT NULL,                -- Номер комнаты кафедры
    Номер_корпуса INT NOT NULL,                -- Номер корпуса кафедры
    Телефон NVARCHAR(20),                      -- Телефон кафедры
    Кол_во_преподавателей INT NOT NULL         -- Количество преподавателей на кафедре
);
GO

-- 2. Создание таблицы "Преподаватели"
CREATE TABLE Преподаватели (
    Фамилия NVARCHAR(50) NOT NULL,
    Имя NVARCHAR(50) NOT NULL,
    Отчество NVARCHAR(50),
    Кафедра NVARCHAR(100) NOT NULL REFERENCES Кафедра(Название_кафедры), -- Внешний ключ на таблицу "Кафедра"
    Год_рождения DATE NOT NULL,
    Год_поступления_на_работу INT NOT NULL,
    Стаж INT NOT NULL,
    Должность NVARCHAR(100) NOT NULL,
    Пол CHAR(1) CHECK (Пол IN ('М', 'Ж')),      -- М или Ж
    Адрес NVARCHAR(200),
    Город NVARCHAR(100),
    Телефон NVARCHAR(20),
    PRIMARY KEY (Фамилия, Имя, Отчество)        -- Комбинированный первичный ключ
);
GO

-- 3. Создание таблицы "Студенты"
CREATE TABLE Студенты (
    Фамилия NVARCHAR(50) NOT NULL,
    Имя NVARCHAR(50) NOT NULL,
    Отчество NVARCHAR(50),
    Кафедра NVARCHAR(100) NOT NULL REFERENCES Кафедра(Название_кафедры), -- Внешний ключ на таблицу "Кафедра"
    Год_рождения DATE NOT NULL,
    Пол CHAR(1) CHECK (Пол IN ('М', 'Ж')),      -- М или Ж
    Адрес NVARCHAR(200),
    Город NVARCHAR(100),
    Телефон NVARCHAR(20),
    PRIMARY KEY (Фамилия, Имя, Отчество)        -- Комбинированный первичный ключ
);
GO

-- 4. Создание таблицы "Дисциплины"
CREATE TABLE Дисциплины (
    Название_дисциплины NVARCHAR(100) PRIMARY KEY, -- Уникальное название дисциплины
    Кафедра NVARCHAR(100) NOT NULL REFERENCES Кафедра(Название_кафедры), -- Внешний ключ на таблицу "Кафедра"
    Кол_во_часов INT NOT NULL,                    -- Количество часов по дисциплине
    Вид_итогового_контроля NVARCHAR(50) NOT NULL   -- Например: экзамен, зачет, курсовая работа
);
GO

-- 5. Создание таблицы "Ведомости успеваемости"
CREATE TABLE Ведомости_успеваемости (
    Преподаватель_фамилия NVARCHAR(50) NOT NULL,
    Преподаватель_имя NVARCHAR(50) NOT NULL,
    Преподаватель_отчество NVARCHAR(50),
    Дисциплина NVARCHAR(100) NOT NULL REFERENCES Дисциплины(Название_дисциплины), -- Внешний ключ на таблицу "Дисциплины"
    Студент_фамилия NVARCHAR(50) NOT NULL,
    Студент_имя NVARCHAR(50) NOT NULL,
    Студент_отчество NVARCHAR(50),
    Оценка INT CHECK (Оценка BETWEEN 2 AND 5),    -- Оценка от 2 до 5
    PRIMARY KEY (Преподаватель_фамилия, Преподаватель_имя, Преподаватель_отчество, Дисциплина, Студент_фамилия, Студент_имя, Студент_отчество),
    FOREIGN KEY (Преподаватель_фамилия, Преподаватель_имя, Преподаватель_отчество) 
        REFERENCES Преподаватели(Фамилия, Имя, Отчество), -- Внешний ключ на таблицу "Преподаватели"
    FOREIGN KEY (Студент_фамилия, Студент_имя, Студент_отчество) 
        REFERENCES Студенты(Фамилия, Имя, Отчество)       -- Внешний ключ на таблицу "Студенты"
);
GO


INSERT INTO Кафедра (Название_кафедры, Факультет, ФИО_заведующего, Номер_комнаты, Номер_корпуса, Телефон, Кол_во_преподавателей)
VALUES 
('Кафедра программирования', 'Факультет информатики', 'Иванов Иван Иванович', 301, 2, '+79991234567', 15),
('Кафедра математики', 'Факультет естественных наук', 'Петров Петр Петрович', 405, 1, '+79997654321', 10);



INSERT INTO Преподаватели (Фамилия, Имя, Отчество, Кафедра, Год_рождения, Год_поступления_на_работу, Стаж, Должность, Пол, Адрес, Город, Телефон)
VALUES 
('Сидоров', 'Алексей', 'Алексеевич', 'Кафедра программирования', '1980-05-10', 2010, 13, 'Доцент', 'М', 'ул. Ленина, 1', 'Москва', '+79991112233');



INSERT INTO Студенты (Фамилия, Имя, Отчество, Кафедра, Год_рождения, Пол, Адрес, Город, Телефон)
VALUES 
('Кузнецов', 'Андрей', 'Андреевич', 'Кафедра программирования', '2000-03-15', 'М', 'ул. Пушкина, 5', 'Москва', '+79993334455');




INSERT INTO Дисциплины (Название_дисциплины, Кафедра, Кол_во_часов, Вид_итогового_контроля)
VALUES 
('Программирование', 'Кафедра программирования', 120, 'Экзамен');




INSERT INTO Ведомости_успеваемости (Преподаватель_фамилия, Преподаватель_имя, Преподаватель_отчество, Дисциплина, Студент_фамилия, Студент_имя, Студент_отчество, Оценка)
VALUES 
('Сидоров', 'Алексей', 'Алексеевич', 'Программирование', 'Кузнецов', 'Андрей', 'Андреевич', 5);










-- Переключение на базу данных master
USE master;
GO

-- Создание аудита сервера
CREATE SERVER AUDIT ServerAudit
TO FILE (FILEPATH = 'C:\SQLAudit') -- Укажите существующий путь для хранения файлов аудита
WITH (
    ON_FAILURE = CONTINUE -- Действие при сбое: продолжать работу даже если аудит не может записать данные
);
GO


-- Создание спецификации аудита сервера
CREATE SERVER AUDIT SPECIFICATION ServerAuditSpec
FOR SERVER AUDIT ServerAudit
ADD (FAILED_LOGIN_GROUP), -- Неудачная попытка авторизации
ADD (BACKUP_RESTORE_GROUP), -- Создание резервной копии
ADD (DATABASE_CHANGE_GROUP); -- Изменение структуры базы данных (включая изменение паролей)
GO


-- Активация аудита сервера
ALTER SERVER AUDIT ServerAudit
STATE = ON;
GO

-- Активация спецификации аудита сервера
ALTER SERVER AUDIT SPECIFICATION ServerAuditSpec
STATE = ON;
GO



-- Переключение на пользовательскую базу данных
USE StudentPerformanceDB;
GO

-- Создание спецификации аудита базы данных
CREATE DATABASE AUDIT SPECIFICATION DatabaseAuditSpec
FOR SERVER AUDIT ServerAudit
ADD (INSERT ON dbo.Студенты BY PUBLIC), -- Отслеживание добавления записей
ADD (UPDATE ON dbo.Студенты BY PUBLIC), -- Отслеживание изменения записей
ADD (DELETE ON dbo.Студенты BY PUBLIC); -- Отслеживание удаления записей
GO

-- Активация спецификации аудита базы данных
ALTER DATABASE AUDIT SPECIFICATION DatabaseAuditSpec
STATE = ON;
GO



